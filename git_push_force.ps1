# ===================================================================
# ORBIX - Script de Git Push para Validaci√≥n Financiera
# Autor: ORBIX Workspace
# Fecha: 2025-07-04
# Descripci√≥n: Maneja el push del proyecto validacion-financiera a GitHub
# ===================================================================

param(
    [switch]$Force = $false,
    [switch]$Verbose = $false
)

# Colores para mejor visualizaci√≥n
$ColorSuccess = "Green"
$ColorWarning = "Yellow" 
$ColorError = "Red"
$ColorInfo = "Cyan"
$ColorHeader = "Magenta"

function Write-OrbixHeader {
    Write-Host ""
    Write-Host "üöÄ ORBIX - Git Push Validaci√≥n Financiera" -ForegroundColor $ColorHeader
    Write-Host "=" * 60 -ForegroundColor $ColorHeader
    Write-Host "üìç Repositorio: git@github.com:yovoyTecSRL/Orbix-Integracion.git" -ForegroundColor $ColorInfo
    Write-Host "üåø Rama: main" -ForegroundColor $ColorInfo
    Write-Host "üìÖ Fecha: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" -ForegroundColor $ColorInfo
    Write-Host "=" * 60 -ForegroundColor $ColorHeader
    Write-Host ""
}

function Test-GitRepository {
    Write-Host "üîç Verificando repositorio Git..." -ForegroundColor $ColorInfo
    
    if (-not (Test-Path ".git")) {
        Write-Host "‚ùå ERROR: No se encontr√≥ repositorio Git" -ForegroundColor $ColorError
        return $false
    }
    
    Write-Host "‚úÖ Repositorio Git encontrado" -ForegroundColor $ColorSuccess
    return $true
}

function Reset-GitMerge {
    Write-Host "üîÑ Reseteando merge en proceso..." -ForegroundColor $ColorInfo
    
    try {
        # Cancelar cualquier merge en proceso
        git merge --abort 2>$null
        git reset --hard HEAD 2>$null
        Write-Host "‚úÖ Merge reseteado" -ForegroundColor $ColorSuccess
    }
    catch {
        Write-Host "‚ö†Ô∏è  No hay merge en proceso" -ForegroundColor $ColorWarning
    }
}

function Sync-WithRemote {
    Write-Host "üîÑ Sincronizando con repositorio remoto..." -ForegroundColor $ColorInfo
    
    try {
        # Configurar editor simple para evitar problemas con vim
        git config core.editor "echo"
        
        # Hacer fetch para obtener informaci√≥n del remoto
        git fetch origin main
        
        # Verificar si hay diferencias
        $localCommit = git rev-parse HEAD
        $remoteCommit = git rev-parse origin/main
        
        if ($localCommit -eq $remoteCommit) {
            Write-Host "‚úÖ Local y remoto est√°n sincronizados" -ForegroundColor $ColorSuccess
            return $true
        }
        
        Write-Host "‚ö†Ô∏è  Diferencias detectadas entre local y remoto" -ForegroundColor $ColorWarning
        
        if ($Force) {
            Write-Host "üîß Forzando push..." -ForegroundColor $ColorWarning
            git push -f origin main
        } else {
            Write-Host "üîÑ Haciendo pull con merge autom√°tico..." -ForegroundColor $ColorInfo
            git pull origin main --no-edit --allow-unrelated-histories
        }
        
        return $true
    }
    catch {
        Write-Host "‚ùå Error sincronizando: $($_.Exception.Message)" -ForegroundColor $ColorError
        return $false
    }
}

function Push-ToGitHub {
    Write-Host "üì§ Enviando c√≥digo a GitHub..." -ForegroundColor $ColorInfo
    
    try {
        # Verificar estado del repositorio
        $status = git status --porcelain
        if ($status) {
            Write-Host "‚ö†Ô∏è  Hay cambios sin commitear:" -ForegroundColor $ColorWarning
            git status --short
            return $false
        }
        
        # Hacer push
        git push -u origin main
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Push completado exitosamente" -ForegroundColor $ColorSuccess
            return $true
        } else {
            Write-Host "‚ùå Error en el push" -ForegroundColor $ColorError
            return $false
        }
    }
    catch {
        Write-Host "‚ùå Error haciendo push: $($_.Exception.Message)" -ForegroundColor $ColorError
        return $false
    }
}

function Show-GitSummary {
    Write-Host ""
    Write-Host "üìä RESUMEN DEL REPOSITORIO" -ForegroundColor $ColorHeader
    Write-Host "=" * 40 -ForegroundColor $ColorHeader
    
    try {
        Write-Host "üåø Rama actual:" -ForegroundColor $ColorInfo
        git branch --show-current
        
        Write-Host ""
        Write-Host "üìù √öltimo commit:" -ForegroundColor $ColorInfo
        git log --oneline -1
        
        Write-Host ""
        Write-Host "üîó Remote configurado:" -ForegroundColor $ColorInfo
        git remote -v
        
        Write-Host ""
        Write-Host "üìä Estado:" -ForegroundColor $ColorInfo
        git status --short
        
    }
    catch {
        Write-Host "‚ùå Error obteniendo informaci√≥n del repositorio" -ForegroundColor $ColorError
    }
    
    Write-Host ""
    Write-Host "=" * 40 -ForegroundColor $ColorHeader
    Write-Host "‚ú® Operaci√≥n completada" -ForegroundColor $ColorSuccess
    Write-Host ""
}

# ===================================================================
# EJECUCI√ìN PRINCIPAL
# ===================================================================

Write-OrbixHeader

# Verificar que estamos en un repositorio Git
if (-not (Test-GitRepository)) {
    exit 1
}

# Resetear cualquier merge en proceso
Reset-GitMerge

# Sincronizar con remoto
if (-not (Sync-WithRemote)) {
    Write-Host "‚ùå Error en la sincronizaci√≥n" -ForegroundColor $ColorError
    exit 1
}

# Hacer push
if (-not (Push-ToGitHub)) {
    Write-Host "‚ùå Error en el push" -ForegroundColor $ColorError
    exit 1
}

# Mostrar resumen
Show-GitSummary

Write-Host "üéâ ¬°Proyecto subido exitosamente a GitHub!" -ForegroundColor $ColorSuccess
Write-Host "üîó Repositorio: https://github.com/yovoyTecSRL/Orbix-Integracion" -ForegroundColor $ColorInfo
